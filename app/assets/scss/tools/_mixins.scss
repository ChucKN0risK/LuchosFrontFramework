// =======================
// Tools / Mixins
// =======================

/// Placeholder
///
/// @author Louis Chenais
///
/// @access public
///
/// @example scss - Usage
///   @include placeholder() {
///     color: blue;
///   }
///
/// @example css - CSS output
///   &::-webkit-input-placeholder {
///     color: blue;
///   }
///   &:-moz-placeholder {
///     color: blue;
///   }
///   &:-ms-input-placeholder {
///     color: blue;
///   }
@mixin placeholder() {
  &::-webkit-input-placeholder {
    @content;
  }
  &:-moz-placeholder {
    @content;
  }
  &:-ms-input-placeholder {
    @content;
  }
}

/// Flexbox vertical Centering (apply this class on the parent element of your targeted children)
@mixin flex-vertical-center {
  display: flex;
  align-items: center;
}

/// Flexbox absolute centering (apply this class on the parent element of your targeted children)
///
/// @author Louis Chenais
///
/// @access public
///
/// @example scss - Usage
///   .foo {
///     @include flex-absolute-center();
///   }
///
/// @example css - CSS output
///   .foo {
///     display: flex;
///     align-items: center;
///     justify-content: center;
///   }
@mixin flex-absolute-center {
  display: flex;
  align-items: center;
  justify-content: center;
}

/// Vertical Center
///
/// @author Louis Chenais
///
/// @access public
///
/// @example scss - Usage
///   .foo {
///     @include vertical-center();
///   }
///
/// @example css - CSS output
///   .foo {
///     position: absolute;
///     top: 50%;
///     transform: translateY(-50%);
///   }
@mixin vertical-center {
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
}

/// Vertical & Horizontal Center
///
/// @author Louis Chenais
///
/// @access public
///
/// @example scss - Usage
///   .foo {
///     @include absolute-center();
///   }
///
/// @example css - CSS output
///   .foo {
///     position: absolute;
///     margin: auto;
///     top: 0;
///     right: 0;
///     bottom: 0;
///     left: 0;
///   }
@mixin absolute-center {
  position: absolute;
  margin: auto;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
}

/// Retinize Images 
@mixin retinize($file, $type, $height, $width) {
  background-image: url($imgsrc + $file + '.' + $type);
  @media #{$is-hdpi} {
    & {
      background-image: url($imgsrc + $file + '-2x' + $type);
      @include background-size ($width, $height);
    }
  }
}

/// Retina Media Query
@mixin retina {
  @media only screen and (-webkit-min-device-pixel-ratio: 2), only screen and (min--moz-device-pixel-ratio: 2), only screen and (-o-min-device-pixel-ratio: 2/1), only screen and (min-device-pixel-ratio: 2), only screen and (min-resolution: 192dpi), only screen and (min-resolution: 2dppx) {
    @content;
  }
}

/// Subtle Separator
/// @author Louis Chenais
///
/// @access public
///
/// @example scss
/// li + li {
///   // simulates border-top: 1px solid rgba(black, 0.2); 
///   @include subtle-sep(top, 1px, rgba(black, 0.2)); //Or bottom or left
/// }
@mixin subtle-sep( $dir, $width, $color) {
  $gradient: to left;
  position: relative;
  &:before {
    position: absolute;
    content: "";
    #{$dir}: 0;
    @if $dir==bottom or $dir==top {
      display: block;
      height: $width;
      width: 100%;
      left: 0;
    }
    @else {
      top: 0;
      width: $width;
      height: 100%;
      $gradient: top;
    }
    background: linear-gradient($gradient, transparent, $color, transparent);
  }
}

/// Dropdown link mixin which changes its children color according to its background color.
/// @author Louis Chenais
///
/// @access public
///
/// @example scss
/// .dropdown {
///   @include dropdown(1rem, $bgc-dropdown);
///   padding-top: .6rem;
///   padding-bottom: .6rem; 
/// }
/// @param {Number} $padding - Padding left and right applied on the dropdown container
/// @param {String} $bgc-dropdown - Background color of the dropdown container
@mixin dropdown( $padding-dropdown, $bgc-dropdown) {
  width: 100%;
  padding-left: $padding-dropdown;
  padding-right: $padding-dropdown;
  background-color: $bgc-dropdown;
  color: set-color($bgc-dropdown);
}

/// Icon Mixin aimed to fake an icon but made in pure html. For example a round icon wrapping a step or section number or an icon font wrapped in a rounded '<div>'. Only made to be use inside a dropdown.
/// @author Louis Chenais
///
/// @access public
///
/// @example scss {
///  @include icon(3rem, 3px, $blue);  
/// }
/// @param {Number} $size - Size of the parent wrapping our content
/// @param {Number} $border-width - Border width of the parent wrapping our content
/// @param {String} $border-color - Border color of the parent wrapping our content
/// @param {String} $background-color - Background color of the parent wrapping our content
@mixin icon($size, $border-width: null, $border-color: null, $background-color: transparent) {
  @include flex-absolute-center();
  width: $size;
  height: $size;
  border: $border-width solid $border-color;
  background-color: $background-color;
  border-radius: 50%;
}

/// Mixin helping defining both `width` and `height` simultaneously.
///
/// @author Hugo Giraudel
///
/// @access public
///
/// @param {Length} $width - Element’s `width`
/// @param {Length} $height ($width) - Element’s `height`
///
/// @example scss - Usage
///   .foo {
///     @include size(10em);
///   }
///
///   .bar {
///     @include size(100%, 10em);
///   }
///
/// @example css - CSS output
///   .foo {
///     width: 10em;
///     height: 10em;
///   }
///
///   .bar {
///     width: 100%;
///     height: 10em;
///   }
@mixin size($width, $height: $width) {
  width: $width;
  height: $height;
}

/// Mixin reseting the default link style set in components/links. That way you can define some other style for particular links. For example in footer, header, or other kind of components.
///
/// @author Louis Chenais
///
/// @access public
///
/// @param {String} $color - color of the link on default and hover states.
/// @example scss - Usage
///   .foo {
///     @include size(10em);
///   }
///
/// @example css - CSS output
///   .foo {
///     width: 10em;
///     height: 10em;
///   }
@mixin reset-link($color) {
  text-decoration: none;
  color: $color;
  &:hover {
    color: $color;
  }
}

/// Mixin removing the default outline. That way you can define some other style for particular elements such as buttons. For example the toggle button in the card component.
///
/// @author Louis Chenais
///
/// @access public
///
/// @example scss - Usage
///   .foo {
///     @include no-outline();
///   }
///
/// @example css - CSS output
///   .foo {
///     outline: none;
///   }
///   .foo:active {
///     outline: none;
///   }
///   .foo:focus {
///     outline: none;
///   } 
@mixin no-outline() {
  outline: none;
  &:active {
    outline: none;
  }
  &:focus {
    outline: none;
  }
}

/// Mixin allowing to keep the initial aspect ratio of an element.
///
/// @author Jakob-e
///
/// @access public
///
/// @link http://codepen.io/jakob-e/pen/LEdWNB
///
/// @example scss - Usage
/// .class { @include aspect-ratio(); }            // No arguments defaults to a 1:1 ratio
/// .class { @include aspect-ratio(16, 9); }       // Width and height     
/// .class { @include aspect-ratio(1.777778); }    // Ratio (calculated width/height)         
/// .class { @include aspect-ratio(4px, 3px); }    // Comparable units 
/// .class { @include aspect-ratio($ratio: 1.2); } // Keywords 
@mixin aspect-ratio($ratio-or-width, $height: null) {
  $padding: if($height, percentage($height/$ratio-or-width), percentage(1/$ratio-or-width));
  &:before {
    content: '';
    float: left;
    padding-bottom: $padding;
  }
  &:after {
    content: '';
    display: table;
    clear: both;
  }
}

/// Mixin displaying a tooltip under its associated input. The before pseudo-element is the tooltip itseld containing the tip and the after is the tooltip arrow pointing towards the input. This mixin must be applied on the tooltip modifier class (tooltip--top, tooltip--right, tooltip--bottom, tooltip--left).
///
/// @author Louis Chenais
///
/// @access public
///
/// @link http://codepen.io/peiche/pen/JaftA
///
/// @example scss - Usage
/// .tooltip--right { @include touch-input-tooltip(); } 
@mixin touch-input-tooltip {
  .input-wrapper > input:focus ~ .tooltip-wrapper &:before,
  .input-wrapper > input:focus ~ .tooltip-wrapper &:after {
    opacity: 1;
  }
  .input-wrapper &:before {
    @include mq($from: mobile, $until: desktop) {
      top: 100%;
      left: 0;
      margin-left: 0;
      width: $single-form-width--tablet;
    }
  }
  .input-wrapper &:after {
    @include mq($from: mobile, $until: desktop) {
      border-bottom-color: $blue;
      border-top: none;
      margin-left: 10px;
      top: 50%;
      margin-top: -6px;
    }
  }
}

/// Mixin providing a png fallback for an svg background image. It works by defining two background-image on a container. Browsers that support multiple background images will display the svg whereas those that don't support it will display the png. It uses the variable $public-path available in scss/tools/variables/site-settings.scss
///
/// @author Ben Schwarz (@benschwarz)
///
/// @access public
///
/// @link http://germanforblack.com/post/43975575422/protip-all-browsers-that-support-svg-background
///
/// @example scss - Usage
/// .logo-sporteasy { 
///    @include touch-input-tooltip(logo_sporteasy);
/// } 
/// @example css - CSS output
/// .logo-sporteasy {
///    background-image: url('#{$public_path}images/logo_sporteasy.png');
///    background-image: none, url('#{$public_path}images/logo_sporteasy.svg');
/// }
@mixin vector-bg-with-fallback($name) {
  background-image: url('#{$public_path}images/frontend/logos/#{$name}.png');
  background-image: none,
  url('#{$public_path}images/frontend/logos/#{$name}.svg');
}

/// Given the location of a webfont, will generate a font-face declaration with multiple file formats. IE9+ Support :)
/// @access public
/// @param {String} $font-name - Font family name
/// @param {String} $file-name - File name with directory
/// @example scss - Usage
///   @include font-face('gotham', '/fonts/gotham');
@mixin font-face($font-name, $file-name) {
  @font-face {
    font-family: quote($font-name);
    src: url($file-name + '.woff2') format('woff2'),
         url($file-name + '.woff') format('woff'),
         url($file-name + '.otf') format('opentype');
  }
}

/// Background gradient helper
/// @access public
/// @param {Color} $start-color - Start color
/// @param {Color} $end-color - End color
/// @param {String} $orientation - Type of gradient, either `vertical`, `horizontal` or `radial`
/// @example scss - Usage
///   .foo {
///     @include background-gradient(red, black, 'vertical');
///   }
/// @example css - Result
///   .foo {
///     background: -webkit-linear-gradient(top, red, black);
///     background: linear-gradient(to bottom, red, black);
///   }
@mixin background-gradient($start-color,
$end-color,
$orientation) {
  background: $start-color;
  @if $orientation=='vertical' {
    background: -webkit-linear-gradient(top, $start-color, $end-color);
    background: linear-gradient(to bottom, $start-color, $end-color);
  }
  @else if $orientation=='horizontal' {
    background: -webkit-linear-gradient(left, $start-color, $end-color);
    background: linear-gradient(to right, $start-color, $end-color);
  }
  @else {
    background: -webkit-radial-gradient(center, ellipse cover, $start-color, $end-color);
    background: radial-gradient(ellipse at center, $start-color, $end-color);
  }
}

